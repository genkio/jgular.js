'use strict';

var _ = require('lodash');

function Lexer() {

}

/**
 * lex takes the original expression string 
 * and returns an array of tokens parsed from that string.
 * @param
 * "a + b"
 * @return
 * [
 *   {text: 'a', identifier: true},
 *   {text: '+'},
 *   {text: 'b', identifier: true}
 * ]
 */
Lexer.prototype.lex = function(text) {
  this.text = text;
  this.index = 0;
  this.ch = undefined;
  this.tokens = [];

  while (this.index < this.text.length) {
    this.ch = this.text.charAt(this.index);
    if (this.isNumber(this.ch) ||
        (this.ch === '.' && this.isNumber(this.peek()))) {
      this.readNumber();
    } else if (this.ch === '\'' || this.ch === '"') {
      this.readString();
    } else if (this.isIdent(this.ch)) {
      this.readIdent();
    } else if (this.isWhitespace(this.ch)) {
      this.index++;
    } else {
      throw 'Unexpected next character: ' + this.ch;
    }
  }

  return this.tokens;
};

Lexer.prototype.isNumber = function(ch) {
  return '0' <= ch && ch <= '9';
};

Lexer.prototype.isIdent = function(ch) {
  return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||
    ch === '_' || ch === '$';
};

Lexer.prototype.isWhitespace = function(ch) {
  return ch === ' ' || ch === '\r' || ch === '\t' ||
    ch === '\n' || ch === '\v' || ch === '\u00A0';
};

Lexer.prototype.readNumber = function() {
  var number = '';
  while (this.index < this.text.length) {
    var ch = this.text.charAt(this.index);
    if (ch === '.' || this.isNumber(ch)) {
      number += ch;
    } else {
      break;
    }
    this.index++;
  }
  this.tokens.push({
    text: number,
    value: Number(number)
  });
};

Lexer.prototype.readString = function() {
  this.index++;
  var string = '';
  while (this.index < this.text.length) {
    var ch = this.text.charAt(this.index);
    if (ch === '\'' || ch === '"') {
      this.index++;
      this.tokens.push({
        text: string,
        value: string
      });
      return;
    } else {
      string += ch;
    }
    this.index++;
  }
  throw 'Unmatched quote';
};

Lexer.prototype.readIdent = function() {
  var text = '';
  while (this.index < this.text.length) {
    var ch = this.text.charAt(this.index);
    if (this.isIdent(ch) || this.isNumber(ch)) {
      text += ch;
    } else {
      break;
    }
    this.index++;
  }

  var token = {text: text};
  this.tokens.push(token);
};

Lexer.prototype.peek = function() {
  return this.index < this.text.length - 1?
    this.text.charAt(this.index + 1) : false;
};


function AST(lexer) {
  this.lexer = lexer;
}
AST.Program = 'Program';
AST.Literal = 'Literal';

/**
 * ast takes the array of tokens generated by the lexer 
 * and builds up an Abstract Syntax Tree (AST) from them.
 * The tree represents the syntactic structure of the expression as nested JavaScript objects.
 * @param
 * [
 *   {text: 'a', identifier: true},
 *   {text: '+'},
 *   {text: 'b', identifier: true}
 * ]
 * @return
 * {
 *   type: AST.BinaryExpression,
 *   operator: '+',
 *   left: {
 *     type: AST.Identifier,
 *     name: 'a' 
 *   },
 *   right: {
 *     type: AST.Identifier,
 *     name: 'b'
 *   } 
 * }
 */
AST.prototype.ast = function(text) {
  this.tokens = this.lexer.lex(text);
  // AST building will be done here
};

AST.prototype.ast = function(text) {
  this.tokens = this.lexer.lex(text);
  return this.program();
};

AST.prototype.program = function() {
  return {type: AST.Program, body: this.primary()};
};

AST.prototype.primary = function() {
  if (this.constants.hasOwnProperty(this.tokens[0].text)) {
    return this.constants[this.tokens[0].text];
  } else {
    return this.constant();
  }
};

AST.prototype.constant = function() {
  return {type: AST.Literal, value: this.tokens[0].value};
};

AST.prototype.constants = {
  'null': {type: AST.Literal, value: null},
  'true': {type: AST.Literal, value: true},
  'false': {type: AST.Literal, value: false}
};


function ASTCompiler(astBuilder) {
  this.astBuilder = astBuilder;
}

/**
 * ast compile takes the abstract syntax tree 
 * and compiles it into a JavaScript function that evaluates the expression represented in the tree. 
 * @param
 * {
 *   type: AST.BinaryExpression,
 *   operator: '+',
 *   left: {
 *     type: AST.Identifier,
 *     name: 'a' 
 *   },
 *   right: {
 *     type: AST.Identifier,
 *     name: 'b'
 *   } 
 * }
 * @return
 * function(scope) {
 *   return scope.a + scope.b;
 * }
 */
ASTCompiler.prototype.compile = function(text) {
  var ast = this.astBuilder.ast(text);
  this.state = {body: []};
  this.recurse(ast);
  /* jshint -W054 */
  return new Function(this.state.body.join(''));
  /* jshint +W054 */
};

ASTCompiler.prototype.recurse = function(ast) {
  switch (ast.type) {
    case AST.Program:
      this.state.body.push('return ', this.recurse(ast.body), ';');
      break;
    case AST.Literal:
      return this.escape(ast.value);
  }
};

ASTCompiler.prototype.escape = function(value) {
  if (_.isString(value)) {
    return '\'' + value + '\'';
  } else if (_.isNull(value)) {
    return 'null';
  } else {
    return value;
  }
};


/**
 * Parser constructs the complete parsing pipeline from the pieces outlined above. 
 */
function Parser(lexer) {
  this.lexer = lexer;
  this.ast = new AST(this.lexer);
  this.astCompiler = new ASTCompiler(this.ast);
}

/**
 * parse takes an Angular expression string
 * and returns a function that executes that expression in a certain context.
 * @param
 * "a + b"
 * @return
 * function(scope) {
 *   return scope.a + scope.b;
 * }
 */
Parser.prototype.parse = function(text) {
  return this.astCompiler.compile(text);
};


function parse(expr) {
  var lexer = new Lexer();
  var parser = new Parser(lexer);
  return parser.parse(expr);
}

module.exports = parse;